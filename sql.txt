***** SQL. 4. DDL & DML
*****
CREATE DATABASE company_repository;

CREATE SCHEMA  company_storage;

DROP SCHEMA company_storage;
*****
***** SQL. 5. Создание таблиц
*****
CREATE TABLE company_storage.company (
    id INT,
    name VARCHAR(128),
    data DATE
);

-- DROP TABLE public.company;
*****
***** SQL. 6. Операция Insert. Constraints
CREATE TABLE company_storage.company
(
    id   INT PRIMARY KEY,
    name VARCHAR(128) UNIQUE NOT NULL,
    data DATE NOT NULL CHECK (data > '1995-01-01' AND data < '2020-01-01')
    -- PRIMARY KEY (id),
    -- UNIQUE (name)
    -- UNIQUE
    -- CHECK
    -- PRIMARY KEY = UNIQUE NOT NULL
    -- FOREIGN KEY
);

INSERT INTO company(id, name, data)
VALUES (1, 'Google', '2001-01-01'),
       (2, 'Apple', '2002-10-29'),
       (3, 'Facebook', '1998-09-13');
*****
***** SQL. 7. Автогенерируемые идентификаторы
CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL,
    salary     INT,
    UNIQUE (first_name, last_name)
);

-- DROP TABLE employee;

insert into employee (first_name, last_name, salary)
values ('Ivan', 'Ivanov', 1000),
       ('Petr', 'Petrov', 2000),
       ('Sveta', 'Svetikova', 1500);
*****
***** SQL. 8. Создание запросов - SELECT. Сортировка выборки - ORDER BY
*****
-- Alias (псевдонимы) для полей и таблиц.
-- DISTINCT - дублирующиеся данные убираются.
-- OFFSET 2 - пробустить 2 записи.
-- LIMIT 2 - отобразить только 2 записи.
-- ORDER BY salary ASC - сортирует по возрастанию.
-- ORDER BY salary DESC - сортирует по убыванию.
SELECT DISTINCT
       id,
       first_name f_name,
       last_name l_name,
       salary
FROM employee empl
ORDER BY salary DESC
LIMIT 2
OFFSET 2;
*****
***** SQL. 9. Фильтрация выборки - WHERE
*****
SELECT DISTINCT id,
                first_name f_name,
                last_name  l_name,
                salary
FROM employee empl
-- WHERE salary > 1200
-- WHERE first_name = 'Ivan'
-- WHERE first_name LIKE 'Pet%'
-- WHERE last_name LIKE '%ov%'
-- WHERE first_name ILIKE 'ivan'
-- WHERE salary BETWEEN 1000 AND 1500
-- WHERE salary IN (1000, 1100, 2000)
--WHERE salary IN (1000, 1100, 2000) AND first_name LIKE 'Iv%'
-- У AND приоритет выше чем у OR.
WHERE salary IN (1000, 1100, 2000)
   OR (first_name LIKE 'Iv%'
    AND last_name ILIKE '%ov%')
ORDER BY salary DESC;
--LIMIT 2
--OFFSET 2;
*****
***** SQL. 10. Агрегирующие и встроенные функции
*****
SELECT
       -- sum(salary) -- Вся сумма.
       -- avg(salary) -- Средняя сумма.
       -- max(salary) -- Максимальная сумма.
       -- min(salary) -- Минимальная сумма.
       -- count(salary) -- Кол-во строк в нашей выборке.
       -- count(*) -- Кол-во строк в нашей выборке.
       -- upper(first_name) -- Приводит наше поле в верхний регистр.
       -- lower(first_name) -- Приводит наше поле в нижний регистр.
       -- concat(first_name, ' ', last_name, ' ', salary) -- Объединяет все строки перечисленные.
       -- concat(first_name, ' ', last_name, ' ', salary) fio -- Объединяет все строки перечисленные.

FROM employee empl;

SELECT now()
*****
***** SQL. 11. Внешний ключ - FOREIGN KEY
*****
CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL,
    company_id INT REFERENCES company (id),
    salary     INT,
    UNIQUE (first_name, last_name)
   -- FOREIGN KEY (company_id) REFERENCES company (id)
);

 DROP TABLE employee;

insert into employee (first_name, last_name, salary, company_id)
values ('Ivan', 'Sidorov', 500, 1),
       ('Ivan', 'Ivanov', 1000, 2),
       ('Arni', 'Paramonov', NULL, 2),
       ('Petr', 'Petrov', 2000, 3),
       ('Sveta', 'Svetikova', 1500, NULL);
*****
***** SQL. 12. Объединение запросов - UNION
*****
SELECT
    id,first_name
FROM employee
WHERE company_id IS NOT NULL
UNION
SELECT
    id, first_name
FROM employee
WHERE salary IS NULL;

-- Для удаления дубликатов из одного SELECT
-- можно использовать ключевое слово DISTINCT.
*****
***** SQL. 13. Подзапросы
*****
SELECT
       avg(empl.salary)
FROM (SELECT
          *
      FROM employee
      ORDER BY salary DESC
      LIMIT 2) empl;

select *,
       (select avg(salary) from employee) avg,
       (select max(salary) from employee) max,
       (select max(salary) from employee) - salary diff
from employee;

select *
from employee
-- where company_id IN (1, 2);
where company_id IN (select company.id from company);

SELECT
       *
FROM employee
ORDER BY salary
LIMIT 2;
*****
***** SQL. 14. Удаление строк - DELETE
*****

CREATE TABLE employee
(
    id         SERIAL PRIMARY KEY,
    first_name VARCHAR(128) NOT NULL,
    last_name  VARCHAR(128) NOT NULL,
    -- company_id INT REFERENCES company (id) ON DELETE
    -- ON DELETE CASCADE > Если мы удаляем компанию то и удаляем
    -- всего сотрудников в ней. Что бы не удалять сотрудника
    -- перед тем как удаляем компанию.
    company_id INT REFERENCES company (id) ON DELETE CASCADE ,
    salary     INT,
    UNIQUE (first_name, last_name)
   -- FOREIGN KEY (company_id) REFERENCES company (id)
);

 DROP TABLE employee;

insert into employee (first_name, last_name, salary, company_id)
values ('Ivan', 'Sidorov', 500, 1),
       ('Ivan', 'Ivanov', 1000, 2),
       ('Arni', 'Paramonov', NULL, 2),
       ('Petr', 'Petrov', 2000, 3),
       ('Sveta', 'Svetikova', 1500, NULL);


       DELETE FROM employee
       WHERE salary IS NULL;

       DELETE
       FROM employee
       WHERE salary = (SELECT max(salary) FROM employee);

       -- Сначала удаляем id компании.
       DELETE
       FROM employee
       WHERE company_id = 1;

       -- После только можно удалить саму компанию.
       DELETE
       FROM company
       WHERE id = 2;


       select *
       from employee;
*****
***** SQL. 15. Обновление строк - UPDATE
*****
UPDATE employee
SET company_id = 1,
    salary     = 1700
WHERE id = 10 OR id = 9
RETURNING id, first_name || ' ' || employee.last_name fio;
*****
***** SQL. 17. Нормализация баз данных. Теория
*****
*****
***** SQL. 18. Нормальные формы. 1НФ, 2НФ, 3НФ
*****
*****
***** SQL. 19. Связи между таблицами
*****
*****
***** SQL. 20. Соединение таблиц. INNER & CROSS JOIN
*****
SELECT company.name,
       employee.first_name || employee.last_name fio
FROM employee,
     company
WHERE employee.company_id = company.id;

SELECT c.name,
       employee.first_name || employee.last_name fio
FROM employee
         INNER JOIN company c ON employee.company_id = c.id;

-- INNER JOIN
-- CROSS JOIN
-- LEFT OUTER JOIN
-- RIGHT OUTER JOIN
-- FULL OUTER JOIN
-- **************
-- JOIN
-- CROSS JOIN
-- LEFT JOIN
-- RIGHT JOIN
-- FULL JOIN
*****
***** SQL. 21. Соединение таблиц. OUTER JOINs. LEFT, RIGHT, FULL
*****
CREATE TABLE contact
(
    id     SERIAL PRIMARY KEY,
    number VARCHAR(128) NOT NULL,
    type   VARCHAR(128)
);

insert into contact (number, type)
values ('234-56-78', 'домашний'),
       ('987-65-43', 'рабочий'),
       ('345-12-49', 'мобильный'),
       ('123-76-00', ''),
       ('223-47-81', '');

CREATE TABLE employee_contact
(
    employee_id INT NOT NULL REFERENCES employee (id) ON DELETE CASCADE,
    contact_id  INT NOT NULL REFERENCES contact (id) ON DELETE CASCADE

);

drop table employee_contact;

insert into employee_contact (employee_id, contact_id)
values (1, 1),
       (1, 2),
       (2, 2),
       (2, 3),
       (2, 4),
       (3, 5);
-- ****

SELECT c.name,
       e.first_name
FROM company c
         LEFT JOIN employee e
                   ON c.id = e.company_id;

SELECT c.name,
       e.first_name
FROM employee e
         LEFT JOIN company c ON e.company_id = c.id;


SELECT c.name,
       e.first_name
FROM employee e
         RIGHT JOIN company c
             ON e.company_id = c.id
             AND c.data > '2001-01-01';

SELECT c.name,
       e.first_name
FROM employee e
         FULL JOIN company c
                    ON e.company_id = c.id;
*****
***** SQL. 22. Группировки запросов. GROUP BY & HAVING
*****
select company.name, count(e.id)
from company
         left join employee e ON company.id = e.company_id
-- WHERE company.name = 'Amazon'
GROUP BY company.id
HAVING count(e.id) > 0;
*****
***** SQL. 23. Оконные функции. Window functions
*****
select company.name,
       e.last_name,
       e.salary,
       --count(*) OVER (),
       --max(e.salary) OVER (),
       row_number() OVER (partition by company.name),
       dense_rank() OVER (partition by company.name ORDER BY e.salary nulls first )
from company
left join employee e ON company.id = e.company_id
ORDER BY company.name;
*****
***** SQL. 24. Представление. View
*****
CREATE VIEW employee_view AS
select company.name,
       e.last_name,
       e.salary,
       max(e.salary) OVER (PARTITION BY company.name),
       min(e.salary) OVER (PARTITION BY company.name)
       --count(*) OVER (),
       --max(e.salary) OVER (),
       --row_number() OVER (partition by company.name),
       --dense_rank() OVER (partition by company.name ORDER BY e.salary nulls first )
from company
left join employee e ON company.id = e.company_id
ORDER BY company.name;

select *
from employee_view
where name = 'Facebook';

CREATE MATERIALIZED VIEW m_employee_view AS
select company.name,
       e.last_name,
       e.salary,
       max(e.salary) OVER (PARTITION BY company.name),
       min(e.salary) OVER (PARTITION BY company.name)
       --count(*) OVER (),
       --max(e.salary) OVER (),
       --row_number() OVER (partition by company.name),
       --dense_rank() OVER (partition by company.name ORDER BY e.salary nulls first )
from company
         left join employee e ON company.id = e.company_id
ORDER BY company.name;

select *
from m_employee_view;

select *
from employee_view;

REFRESH MATERIALIZED VIEW m_employee_view;
*****
***** SQL. 25. Изменение таблиц. ALTER
*****
ALTER TABLE IF EXISTS employee
ADD COLUMN gender INT;

ALTER TABLE employee
ALTER COLUMN gender SET NOT NULL ;

ALTER TABLE employee
DROP COLUMN gender;

update employee
set gender = 1
where id <= 5;
*****
***** SQL. 26. Практика. Часть 2
*****
CREATE DATABASE flight_repository;

-- DROP TABLE airport, aircraft, seat, flight, ticket;

-- airport - аэропорт.
CREATE TABLE airport
(
    code CHAR(3) PRIMARY KEY ,
    country VARCHAR(256) NOT NULL ,
    city VARCHAR(128) NOT NULL
);

-- aircraft - самолет.
CREATE TABLE aircraft
(
    id SERIAL PRIMARY KEY ,
    model VARCHAR(128) NOT NULL
);

-- seat - место в самолете.
CREATE TABLE seat
(
    aircraft_id INT REFERENCES aircraft (id),
    seat_no VARCHAR(4) NOT NULL ,
    PRIMARY KEY (aircraft_id, seat_no)
);

-- flight - рейс.
CREATE TABLE flight
(
    id BIGSERIAL PRIMARY KEY ,
    flight_no VARCHAR(16) NOT NULL ,
    departure_date TIMESTAMP NOT NULL ,
    departure_airport_code CHAR(3) REFERENCES airport(code) NOT NULL ,
    arrival_date TIMESTAMP NOT NULL ,
    arrival_airport_code CHAR(3) REFERENCES airport(code) NOT NULL ,
    aircraft_id INT REFERENCES aircraft (id) NOT NULL ,
    status VARCHAR(32) NOT NULL
);

-- ticket - Билет.
CREATE TABLE ticket
(
    id BIGSERIAL PRIMARY KEY ,
    passenger_no VARCHAR(32) NOT NULL ,
    passenger_name VARCHAR(128) NOT NULL ,
    flight_id BIGINT REFERENCES flight (id) NOT NULL ,
    seat_no VARCHAR(4) NOT NULL ,
    cost NUMERIC(8, 2) NOT NULL
);

insert into airport (code, country, city)
values ('MNK', 'Беларусь', 'Минск'),
       ('LDN', 'Англия', 'Лондон'),
       ('MSK', 'Россия', 'Москва'),
       ('BSL', 'Испания', 'Барселона');

insert into aircraft (model)
values ('Боинг 777-300'),
       ('Боинг 737-300'),
       ('Аэробус A320-200'),
       ('Суперджет-100');

insert into seat (aircraft_id, seat_no)
select id, s.column1
from aircraft
         cross join (values ('A1'), ('A2'), ('B1'), ('B2'), ('C1'), ('C2'), ('D1'), ('D2') order by 1) s;

insert into flight (flight_no, departure_date, departure_airport_code, arrival_date, arrival_airport_code, aircraft_id,
                    status)
values
    ('MN3002', '2020-06-14T14:30', 'MNK', '2020-06-14T18:07', 'LDN', 1, 'ARRIVED'),
    ('MN3002', '2020-06-16T09:15', 'LDN', '2020-06-16T13:00', 'MNK', 1, 'ARRIVED'),
    ('BC2801', '2020-07-28T23:25', 'MNK', '2020-07-29T02:43', 'LDN', 2, 'ARRIVED'),
    ('BC2801', '2020-08-01T11:00', 'LDN', '2020-08-01T14:15', 'MNK', 2, 'DEPARTED'),
    ('TR3103', '2020-05-03T13:10', 'MSK', '2020-05-03T18:38', 'BSL', 3, 'ARRIVED'),
    ('TR3103', '2020-05-10T07:15', 'BSL', '2020-05-10T012:44', 'MSK', 3, 'CANCELLED'),
    ('CV9827', '2020-09-09T18:00', 'MNK', '2020-09-09T19:15', 'MSK', 4, 'SCHEDULED'),
    ('CV9827', '2020-09-19T08:55', 'MSK', '2020-09-19T10:05', 'MNK', 4, 'SCHEDULED'),
    ('QS8712', '2020-12-18T03:35', 'MNK', '2020-12-18T06:46', 'LDN', 2, 'ARRIVED');

insert into ticket (passenger_no, passenger_name, flight_id, seat_no, cost)
values ('112233', 'Иван Иванов', 1, 'A1', 200),
       ('23234A', 'Петр Петров', 1, 'B1', 180),
       ('SS988D', 'Светлана Светикова', 1, 'B2', 175),
       ('QYASDE', 'Андрей Андреев', 1, 'C2', 175),
       ('POQ234', 'Иван Кожемякин', 1, 'D1', 160),
       ('898123', 'Олег Рубцов', 1, 'A2', 198),
       ('555321', 'Екатерина Петренко', 2, 'A1', 250),
       ('QO23OO', 'Иван Розмаринов', 2, 'B2', 225),
       ('9883IO', 'Иван Кожемякин', 2, 'C1', 217),
       ('123UI2', 'Андрей Буйнов', 2, 'C2', 227),
       ('SS988D', 'Светлана Светикова', 2, 'D2', 277),
       ('EE2344', 'Дмитрий Трусцов', 3, 'А1', 300),
       ('AS23PP', 'Максим Комсомольцев', 3, 'А2', 285),
       ('322349', 'Эдуард Щеглов', 3, 'B1', 99),
       ('DL123S', 'Игорь Беркутов', 3, 'B2', 199),
       ('MVM111', 'Алексей Щербин', 3, 'C1', 299),
       ('ZZZ111', 'Денис Колобков', 3, 'C2', 230),
       ('234444', 'Иван Старовойтов', 3, 'D1', 180),
       ('LLLL12', 'Людмила Старовойтова', 3, 'D2', 224),
       ('RT34TR', 'Степан Дор', 4, 'A1', 129),
       ('999666', 'Анастасия Шепелева', 4, 'A2', 152),
       ('234444', 'Иван Старовойтов', 4, 'B1', 140),
       ('LLLL12', 'Людмила Старовойтова', 4, 'B2', 140),
       ('LLLL12', 'Роман Дронов', 4, 'D2', 109),
       ('112233', 'Иван Иванов', 5, 'С2', 170),
       ('NMNBV2', 'Лариса Тельникова', 5, 'С1', 185),
       ('DSA586', 'Лариса Привольная', 5, 'A1', 204),
       ('DSA583', 'Артур Мирный', 5, 'B1', 189),
       ('DSA581', 'Евгений Кудрявцев', 6, 'A1', 204),
       ('EE2344', 'Дмитрий Трусцов', 6, 'A2', 214),
       ('AS23PP', 'Максим Комсомольцев', 6, 'B2', 176),
       ('112233', 'Иван Иванов', 6, 'B1', 135),
       ('309623', 'Татьяна Крот', 6, 'С1', 155),
       ('319623', 'Юрий Дувинков', 6, 'D1', 125),
       ('322349', 'Эдуард Щеглов', 7, 'A1', 69),
       ('DIOPSL', 'Евгений Безфамильная', 7, 'A2', 58),
       ('DIOPS1', 'Константин Швец', 7, 'D1', 65),
       ('DIOPS2', 'Юлия Швец', 7, 'D2', 65),
       ('1IOPS2', 'Ник Говриленко', 7, 'C2', 73),
       ('999666', 'Анастасия Шепелева', 7, 'B1', 66),
       ('23234A', 'Петр Петров', 7, 'C1', 80),
       ('QYASDE', 'Андрей Андреев', 8, 'A1', 100),
       ('1QAZD2', 'Лариса Потемнкина', 8, 'A2', 89),
       ('5QAZD2', 'Карл Хмелев', 8, 'B2', 79),
       ('2QAZD2', 'Жанна Хмелева', 8, 'С2', 77),
       ('BMXND1', 'Светлана Хмурая', 8, 'В2', 94),
       ('BMXND2', 'Кирилл Сарычев', 8, 'D1', 81),
       ('SS988D', 'Светлана Светикова', 9, 'A2', 222),
       ('SS978D', 'Андрей Желудь', 9, 'A1', 198),
       ('SS968D', 'Дмитрий Воснецов', 9, 'B1', 243),
       ('SS958D', 'Максим Гребцов', 9, 'С1', 251),
       ('112233', 'Иван Иванов', 9, 'С2', 135),
       ('NMNBV2', 'Лариса Тельникова', 9, 'B2', 217),
       ('23234A', 'Петр Петров', 9, 'D1', 189),
       ('123951', 'Полина Зверева', 9, 'D2', 234);

-- 3.	Кто летел позавчера рейсом Минск (MNK) - Лондон (LDN) на месте B1?

select *
from ticket
         join flight f ON ticket.flight_id = f.id
where seat_no = 'B1'
  and f.departure_airport_code = 'MNK'
  and f.arrival_airport_code = 'LDN'
  and f.departure_date::date = (now() - interval '2 days')::date;

select interval '2 years 1 days';
select (now() - interval '2 days')::date;

-- 4.	Сколько мест осталось незанятыми 2020-06-14 на рейсе MN3002?

select t2.count - t1.count
from (
         select f.aircraft_id, count(*)
         from ticket t
                  join flight f
                       on f.id = t.flight_id
         where f.flight_no = 'MN3002'
           and f.departure_date::date = '2020-06-14'
         group by f.aircraft_id) t1
         join (
    select aircraft_id, count(*)
    from seat
    group by aircraft_id) t2
              on t1.aircraft_id = t2.aircraft_id;

SELECT EXISTS(select 1 from ticket where id = 2000);

-- 2 вариант.
select s.seat_no
from seat s
where aircraft_id = 1
  and not exists(select t.seat_no
                 from ticket t
                          join flight f
                               on f.id = t.flight_id
                 where f.flight_no = 'MN3002'
                   and f.departure_date::date = '2020-06-14'
                   and s.seat_no = t.seat_no);

-- 3 вариант.
select aircraft_id, s.seat_no
from seat s
where aircraft_id = 1
except
select f.aircraft_id, t.seat_no
from ticket t
         join flight f
              on f.id = t.flight_id
where f.flight_no = 'MN3002'
  and f.departure_date::date = '2020-06-14';

-- 5.	Какие 2 перелета были самые длительные за все время?
select f.id,
       f.arrival_date,
       f.departure_date,
       f.arrival_date - f.departure_date
from flight f
order by (f.arrival_date - f.departure_date) DESC;

-- 6.	Какая максимальная и минимальная продолжительность перелетов между Минском и Лондоном
-- и сколько было всего таких перелетов?

select
            first_value(f.arrival_date - f.departure_date) over (order by (f.arrival_date - f.departure_date) desc) max_value,
            first_value(f.arrival_date - f.departure_date) over (order by (f.arrival_date - f.departure_date)) min_value,
            count(*) OVER()
from flight f
         join airport a
              on a.code = f.arrival_airport_code
         join airport d
              on d.code = f.departure_airport_code
where a.city = 'Лондон'
  and d.city = 'Минск'
limit 1;

-- 7.	Какие имена встречаются чаще всего и какую долю от числа всех пассажиров они составляют?
-- возвр. имя (параметры)
select t.passenger_name,
       count(*),
       round(100.0 * count(*) / (select count(*) from ticket), 2)
from ticket t
group by t.passenger_name
order by 2 desc;

-- 8.	Вывести имена пассажиров, сколько всего каждый с таким именем купил билетов,
-- а также на сколько это количество меньше от того имени пассажира, кто купил билетов больше всего
select t1.*,
       first_value(t1.cnt) over () - t1.cnt
from (
         select t.passenger_no,
                t.passenger_name,
                count(*) cnt
         from ticket t
         group by t.passenger_no, t.passenger_name
         order by 3 desc) t1;

-- 9.	Вывести стоимость всех маршрутов по убыванию.
-- Отобразить разницу в стоимости между текущим и ближайшими в отсортированном списке маршрутами

select t1.*,
       COALESCE(lead(t1.sum_cost) OVER(order by t1.sum_cost), t1.sum_cost) - t1.sum_cost
from (
         select t.flight_id,
                sum(t.cost) sum_cost
         from ticket t
         group by t.flight_id
         order by 2 desc) t1;



values (1, '2'), (3, '4'), (5, '6'), (7, '8')
except
values (1, '2'), (2, '4'), (5, '6'), (7, '9');


select id
from ticket
where id = 29;
*****
***** SQL. 27. Теория множеств. UNION, INTERSECT, EXCEPT
*****
values (1, '2'), (3, '4'), (5, '6'), (7, '8')
except
values (1, '2'), (2, '4'), (5, '6'), (7, '9');
*****
***** SQL. 28. Индексы. B-Tree. Часть 1
*****
***** SQL. 29. Индексы. B-Tree. Часть 2
*****
select *
from ticket
where id = 29
and passenger_no = 'DSA581';

CREATE UNIQUE INDEX unique_flight_id_seat_no_idx ON ticket (flight_id, seat_no);

select count(distinct flight_id) from ticket;
select count(*) from ticket;
*****
***** SQL. 30. План выполнения запросов. Основы
*****
explain select *
from ticket
where passenger_name like 'Иван%';

explain
    select flight_id,count(*)
from ticket
group by flight_id;

select reltuples,
       relkind,
       relpages
from pg_class
where relname = 'ticket';

select avg(bit_length(passenger_no) / 8),
       avg(bit_length(passenger_name) / 8),
       avg(bit_length(seat_no) / 8)
from ticket;

*****
***** SQL. 31. План выполнения запросов. Индексы
*****
explain
select *
from ticket
where id = 25;

create table test1 (
    id SERIAL PRIMARY KEY ,
    number1 INT NOT NULL ,
    number2 INT NOT NULL ,
    value VARCHAR(32) NOT NULL
);

create index test1_number1_idx ON test1(number1);
create index test1_number2_idx ON test1(number2);

insert into test1 (number1, number2, value)
select random() * generate_series,
       random() * generate_series,
       generate_series
from generate_series(1, 100000);

select relname,
       reltuples,
       relkind,
       relpages
from pg_class
where relname like 'test1%';

analyse test1;

explain
select number1
from test1
where number1 = 1000;

explain
select *
from test1
where number1 < 1000 and number1 > 90000;

explain
select *
from test1
where number1 < 1000 or number2 > 90000;

-- index only scan.
-- index scan.
-- bitmap scan (index scan, heap scan).
*****
***** SQL. 32. План выполнения запросов. JOINs
*****
explain analyze
select *
from test1
where number1 < 10000;

create table test2 (
    id SERIAL PRIMARY KEY ,
    test1_id INT REFERENCES test1 (id) NOT NULL ,
    number1 INT NOT NULL ,
    number2 INT NOT NULL ,
    value VARCHAR(32) NOT NULL
);

insert into test2 (test1_id, number1, number2, value)
select id,
       random() * number1,
       random() * number2,
       value
from test1;

create index test2_number1_idx on test2 (number1);
create index test2_number2_idx on test2 (number2);
create index test2_test1_id_idx on test2 (test1_id);

explain analyze
select *
from test1
         join test2 t on test1.id = t.test1_id
limit 100;

explain analyze
select *
from test1 t1
         --join (select * from test2 order by test1_id) t2
         join test2 t2
         on t1.id = t2.test1_id;

analyze test2;


-- nested loop
-- hash join
-- merge join
*****
***** SQL. 33. Работа с СУБД через командную строку
*****
*****